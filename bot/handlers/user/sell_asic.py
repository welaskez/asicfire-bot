from aiogram.fsm.context import FSMContext
from aiogram import F, Router, types

from validators import (
    valid_products_count_filter,
    valid_phone_number_filter,
    valid_city_filter,
    valid_comment_filter,
    valid_product_filter,
    valid_price_filter,
    valid_telegram_username_filter,
)

from keyboards.inline import inline_keyboard, inline_button

from utils.messages import end
from utils.helpers import format_post, decode_redis_hash

from states import UserState

from redis.asyncio import Redis

import config

router = Router()


@router.callback_query(F.data == "sell_asic")
async def sell_asic_cmd(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.name)
    await callback.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await callback.answer()


@router.message(UserState.name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UserState.product)
    await message.answer(
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?\n(–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å, —Ö–µ—à—Ä–µ–π—Ç)\n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: Whatsminer M50 120 TH</i>"
    )


@router.message(UserState.product, F.text, valid_product_filter)
async def process_product(
    message: types.Message,
    state: FSMContext,
    product: str,
):
    await state.update_data(product=product)
    await state.set_state(UserState.products_count)
    await message.answer(text="–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤?\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ</i>")


@router.message(UserState.product)
async def process_invalid_product(message: types.Message):
    await message.answer(
        text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫: Atnminer S21 200 TH</i>"
    )


@router.message(UserState.products_count, F.text, valid_products_count_filter)
async def process_products_count(
    message: types.Message,
    state: FSMContext,
    products_count: str,
):
    await state.update_data(products_count=products_count)
    await state.set_state(UserState.condition)
    await message.answer(
        text="–í –∫–∞–∫–æ–º –æ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏?",
        reply_markup=inline_keyboard(
            buttons=[
                inline_button(text="–ù–æ–≤–æ–µ", callback_data="–ù–æ–≤–æ–µ"),
                inline_button(text="–ë/–£", callback_data="–ë/–£"),
                inline_button(text="–†–∞–∑–Ω–æ–µ", callback_data="–†–∞–∑–Ω–æ–µ"),
            ]
        ),
    )


@router.message(UserState.products_count)
async def process_invalid_products_count(message: types.Message):
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ—Å—è—Ç–∏ "
        "—Ç—ã—Å—è—á —É—Å—Ç—Ä–æ–π—Å—Ç–≤?\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏</i>"
    )


@router.callback_query(UserState.condition)
async def process_condition(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(condition=callback.data)
    await state.set_state(UserState.price)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {callback.data}")
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å.\n\n<i>–ü—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É, –∞ –∑–∞—Ç–µ–º –≤–∞–ª—é—Ç—É</i>"
    )
    await callback.answer()


@router.message(UserState.price, F.text, valid_price_filter)
async def process_price(
    message: types.Message,
    state: FSMContext,
    price: str,
):
    await state.update_data(price=price)
    await state.set_state(UserState.currency)
    await message.answer(
        text="–†—É–±–ª–∏ –∏–ª–∏ usdt?",
        reply_markup=inline_keyboard(
            buttons=[
                inline_button(text="–†—É–±–ª–∏", callback_data="–†–£–ë"),
                inline_button(text="USDT", callback_data="USDT"),
            ]
        ),
    )


@router.message(UserState.price)
async def process_invalid_price(message: types.Message):
    await message.answer("–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.callback_query(UserState.currency)
async def process_currency(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(currency=callback.data)
    await state.set_state(UserState.city)
    await callback.message.answer(text="–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∞—Å–∏–∫–∏?")
    await callback.answer()


@router.message(UserState.city, F.text, valid_city_filter)
async def process_city(message: types.Message, state: FSMContext, city: str):
    await state.update_data(city=city)
    await state.set_state(UserState.is_delivery_company)
    await message.answer(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π?",
        reply_markup=inline_keyboard(
            buttons=[
                inline_button(text="–î–∞", callback_data="–î–∞"),
                inline_button(text="–ù–µ—Ç", callback_data="–ù–µ—Ç"),
            ]
        ),
    )


@router.message(UserState.city)
async def process_invalid_city(message: types.Message):
    await message.answer(text="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.callback_query(UserState.is_delivery_company)
async def process_is_delivery_company(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(is_delivery_company=callback.data)
    await state.set_state(UserState.phone_number)
    await callback.message.answer(
        text="–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –≤–∞–º–∏:\n<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>"
    )
    await callback.answer()


@router.message(UserState.phone_number, F.text, valid_phone_number_filter)
async def process_phone_number(
    message: types.Message,
    state: FSMContext,
    phone_number: str,
):
    await state.update_data(phone_number=phone_number)
    await state.set_state(UserState.telegram_username)
    await message.answer(text="<i>–í–∞—à telegram —é–∑–µ—Ä–Ω–µ–π–º @</i>")


@router.message(UserState.phone_number)
async def process_invalid_phone_number(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(UserState.telegram_username, F.text, valid_telegram_username_filter)
async def process_telegram_username(
    message: types.Message,
    state: FSMContext,
    telegram_username: str,
):
    await state.update_data(telegram_username=telegram_username)
    await state.set_state(UserState.comment)

    await message.answer(
        text="–•–æ—Ç–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º?\n\n<i>–ù–µ –±–æ–ª–µ–µ 140 —Å–∏–º–æ–≤–æ–ª–æ–≤."
        "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ (—Å—Ä–∞–∑—É —É–¥–∞–ª–∏–º)</I>"
    )


@router.message(UserState.telegram_username)
async def process_invalid_telegram_username(message: types.Message):
    await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(UserState.comment, F.text, valid_comment_filter)
async def process_comment(
    message: types.Message,
    state: FSMContext,
    comment: str,
):
    await state.update_data(comment=comment)
    await state.update_data(telegram_id=message.from_user.id)
    post = await state.get_data()
    await message.answer(
        text="–í–∞—à –ø–æ—Å—Ç:\n" + format_post(post=post),
        reply_markup=inline_keyboard(
            buttons=[
                inline_button(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data="correct"),
                inline_button(text="–ò–∑–º–µ–Ω–∏—Ç—å üîÑ", callback_data="incorrect"),
            ]
        ),
    )


@router.message(UserState.comment)
async def process_invalid_comment_length(message: types.Message):
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")


@router.callback_query(F.data == "correct")
async def send_post_to_admin(
    callback: types.CallbackQuery,
    state: FSMContext,
    r: Redis,
):
    post = await state.get_data()

    await r.hmset(name=f"user:{callback.from_user.id}", mapping=post)

    await callback.message.answer(
        text=end,
        reply_markup=inline_keyboard(
            buttons=[inline_button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")]
        ),
    )
    await callback.answer()

    await callback.message.bot.send_message(
        chat_id=config.ADMINS[0],
        text="–ù–æ–≤—ã–π –ø–æ—Å—Ç!\n" + format_post(post=post),
        reply_markup=inline_keyboard(
            buttons=[
                inline_button(
                    text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
                    callback_data=f"publish_post:{callback.from_user.id}",
                ),
                inline_button(
                    text="–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞—Ç—å",
                    callback_data=f"dont_publish_post:{callback.from_user.id}",
                ),
            ]
        ),
    )
    await state.set_state(UserState.publish_post)
    await callback.answer()


@router.callback_query(F.data.startswith("publish_post:"))
async def publish_post(callback: types.CallbackQuery, r: Redis):
    user_id = int(callback.data.split(":")[1])
    post = decode_redis_hash(await r.hgetall(f"user:{user_id}"))

    await callback.message.answer("‚¨ÜÔ∏è –û–ü–£–ë–õ–ò–ö–û–í–ê–ù")
    await callback.message.bot.send_message(
        chat_id=config.CHANEL_USERNAME,
        text=format_post(post),
    )
    await callback.message.bot.send_message(
        chat_id=int(post.get("telegram_id")),
        text="‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
    )
    await callback.answer()
    await r.delete(f"user:{user_id}")


@router.callback_query(F.data == "next")
async def next_cmd(callback: types.CallbackQuery):
    await callback.message.answer_photo(
        photo=types.FSInputFile(f"{config.BASE_DIR}/imgs/img.jpg"),
        caption="üì≤ –ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏ –º—ã "
        "—Ä–∞–∑–º–µ—Å—Ç–∏–º –µ–≥–æ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ - @asicfirechat",
        reply_markup=inline_keyboard(
            buttons=[
                inline_button(text="–ü—Ä–æ–¥–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="sell_asic"),
                inline_button(
                    text="–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ poolproof", callback_data="ecosystem_poolproof"
                ),
            ]
        ),
    )


@router.callback_query(F.data.startswith("dont_publish_post:"))
async def dont_publish_post(callback: types.CallbackQuery, r: Redis):
    user_id = int(callback.data.split(":")[1])
    post = await r.hgetall(f"user:{user_id}")

    await callback.message.answer("‚¨ÜÔ∏è –ù–ï –û–ü–£–ë–õ–ò–ö–û–í–ê–ù")
    await callback.message.bot.send_message(
        chat_id=int(post.get("telegram_id")),
        text="üö´ –í–∞—à –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @asicfire_admin",
    )
    await callback.answer()
    await r.delete(f"user:{user_id}")


async def incorrect_data(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    await state.set_state(UserState.name)
    await callback.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await callback.answer()
